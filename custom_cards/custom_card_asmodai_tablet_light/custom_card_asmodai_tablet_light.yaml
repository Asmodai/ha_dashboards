---
card_asmodai_tablet_light:
  template: 
    - "ulm_translation_engine"
    - "icon_more_info_new"
  variables:
    name: "[[[ return entity.attributes.friendly_name; ]]]"
    icon: "[[[ return entity.attributes.icon; ]]]"
    color_select_mode: false
    filters:
      include: null
      exclude: null
    colors:
      background: "#422e5e"
      button:     "#573d7c"
      active:     "234,225,254"
      inactive:   "143,142,144"
      disabled:   "92,39,157"
    options:
      slider_min:   0
      slider_max:   100
      brightness_1: 10
      brightness_2: 30
      brightness_3: 50
      brightness_4: 70
      brightness_5: 100
    icons:
      scenes:       mdi:palette
      brightness_1: mdi:lightbulb-on-10
      brightness_2: mdi:lightbulb-on-30
      brightness_3: mdi:lightbulb-on-50
      brightness_4: mdi:lightbulb-on-70
      brightness_5: mdi:lightbulb-on
    show_icon:      true
    show_name:      true
    enable_buttons: true
  show_icon:  false
  show_name:  false
  show_label: false
  styles:
    grid:
      - grid-template-areas: >
          [[[
            var areas  = [];

            if (variables.show_icon || variables.show_name) {
              areas.push("item1");
            }

            // Slider is always shown.
            areas.push("slider");

            if (variables.enable_buttons) {
              areas.push("buttons");
            }

            return "\"" + areas.join("\" \"") + "\"";
          ]]]
      - grid-template-columns: "1fr"
      - grid-template-rows: >
          [[[
            var rows = [];

            if (variables.show_icon || variables.show_name) {
              rows.push("min-content");
            }

            // Slider is always shown.
            rows.push("min-content");

            if (variables.enable_buttons) {
              rows.push("min-content");
            }

            return rows.join(" ");
          ]]]
      - row-gap: "12px"
    card:
      - background-color: "[[[ return variables.colors.background; ]]]"
      - --keep-background: 'true'
      - box-shadow: 4px 4px 5px 1px rgba(0,0,0,0.3)
      - border-radius: 20px;
      - padding:          "12px"
    custom_fields:
      title: 
        - display: >
            [[[
              if (variables.show_icon || variables.show_name) {
                return "block"
              }

              return "none";
            ]]]     
      buttons:
        - display: >
            [[[
              if (variables.enable_buttons) {
                return "block"
              }

              return "none";
            ]]]
  custom_fields:
    item1:
      card:
        type: custom:button-card
        styles:
          grid:
            - grid-template-areas:   "'item1 item2'"
            - grid-template-columns: "min-content 1fr"
            - grid-template-rows:    "min-content"
        custom_fields:
          item1:
            card:
              type:   custom:button-card
              entity: "[[[ return entity ? entity.entity_id : null; ]]]"
              icon:   "[[[ return variables.icon; ]]]"
              styles:
                icon:
                  - color: >
                      [[[
                        if (!entity) {
                          return 'rgba(' + variables.colors.disabled + ',1)';
                        }
                      
                        if (entity.attributes.rgb_color) {
                          return 'rgba(' + entity.attributes.rgb_color + ',1)';
                        }

                        return 'rgba(' + variables.colors.inactive + ',0.9)';
                      ]]]
                  - img_cell:
                    - background-color: transparent
          item2:
            card:
              type:   custom:button-card
              entity: "[[[ return entity.entity_id; ]]]"
              name:   "[[[ return variables.name; ]]]"
              label: >
                [[[
                  var lbl = variables.ulm_translation_state;

                  if (entity.attributes.brightness != null && entity.state === 'on') {
                    var bri = Math.round(entity.attributes.brightness / 2.55);
                    lbl = (bri ? bri : "0") + "%";
                  }

                  return lbl;
                ]]]
              state:
                - operator: "template"
                  value:    "[[[ return variables.ulm_active_state; ]]]"
                  styles:
                    name:
                      - color: "rgb(250, 250, 250)"
                    label:
                      - color: "rgb(250, 250, 250)"
    slider:
      card:
        type:   custom:my-slider
        entity: "[[[ return entity.entity_id; ]]]"
        radius: "14px"
        height: "42px"
        minSet: "[[[ return variables.options.slider_min; ]]]"
        maxSet: "[[[ return variables.options.slider_max; ]]]"
        mainSliderColor: >
          [[[
            if (!entity || entity.state == "unavailable") {
              return 'rgba(' + variables.colors.disabled + ',1)';
            }
          
            if (entity.attributes.rgb_color) {
              return 'rgba(' + entity.attributes.rgb_color + ',1)';
            }

            return 'rgba(' + variables.colors.active + ',1)';
          ]]]
        secondarySliderColor: >
          [[[
            if (!entity || entity.state == "unavailable") {
              return 'rgba(' + variables.colors.disabled + ',1)';
            }
          
            if (entity.attributes.rgb_color) {
              return 'rgba(' + entity.attributes.rgb_color + ',0.2)';
            }

            return 'rgba(' + variables.colors.active + ',0.2)';
          ]]]
        thumbColor: >
          [[[
            if (!entity || entity.state == "unavailable") {
              return 'rgba(' + variables.colors.disabled + ',1)';
            }
          
            if (entity.attributes.rgb_color) {
              return 'rgba(' + entity.attributes.rgb_color + ',1)';
            }

            return 'rgba(' + variables.colors.active + ',1)';
          ]]]
        mainSliderColorOff: >
          [[[
            return 'rgba(' + variables.colors.disabled + ',0.05)';
          ]]]
        secondarySliderColorOff: >
          [[[
            return 'rgba(' + variables.colors.disabled + ',0.05)';
          ]]]
        thumbHorizontalPadding: "0px"
        thumbVerticalPadding:   "0px"
        thumbWidth:             "12px"
        style: |
          ha-card {
            border-radius: 14px;
            box-shadow: none;
          }
    buttons:
      card:
        type: custom:button-card
        styles:
          grid:
            - grid-template-areas:   "'sty btn1 btn2 btn3 btn4 btn5'"
            - grid-template-columns: "1fr  1fr  1fr  1fr  1fr  1fr"
            - grid-template-rows:    "min-content"
            - column-gap:            "7px"
          card:
            - box-shadow: "none"
            - padding:    "0px"
            - background: "none"
        custom_fields:
          sty: # Scenes
            card:
              type: custom:button-card
              template: widget_icon
              entity: "[[[ return entity ? entity.entity_id : null; ]]]"
              styles:
                card:
                  - background-color: "[[[ return variables.colors.button; ]]]"
                img_cell:
                  - background-color: >
                      [[[
                        if (entity.state == "on") {
                          return 'rgba(' + variables.colors.button + ',0.2)';
                        }

                        return 'rgba(' + variables.colors.button + ',0.6)';
                      ]]]
                icon:
                  - color: >
                      [[[
                        if (entity.state == "off") {
                          return 'rgba(' + variables.colors.inactive + ',0.9)';
                        }

                        return 'rgba(' + variables.colors.active + ',1)';
                      ]]]
              tap_action: >
                  [[[
                    if (!entity) {
                      return { "action": "none" };
                    }

                    var title = variables.color_select_mode
                                  ? "Select Color"
                                  : "Select Style";
                    var obj   = variables.color_select_mode
                                  ? {
                                      "type": "custom:light-entity-card",
                                      "entity": entity.entity_id
                                    }
                                  : {
                                      "type":     "custom:button-card",
                                      "template": "card_asmodai_tablet_light_scenes",
                                      "styles": {
                                        "card": [
                                          { "border-radius":              "none"    },
                                          { "box-shadow":                 "none"    },
                                          { "cursor":                     "default" },
                                          { "--mdc-ripple-press-opacity": 0         },
                                        ]
                                      },
                                      "variables": {
                                        "light_entity":  entity.entity_id,
                                        "scene_include": variables.filters.include,
                                        "scene_exclude": variables.filters.exclude
                                      }
                                    };

                    return {
                      "action": "fire-dom-event",
                      "browser_mod": {
                        "service":  "browser_mod.popup",
                        "deviceID": "this",
                        "data": {
                          "title":  title,
                          "content": obj
                        }
                      }
                    };
                  ]]]
              icon: "[[[ return variables.icons.scenes; ]]]"
          btn1: # Brightness preset #1
            card:
              type: custom:button-card
              template: widget_icon
              entity: "[[[ return entity.entity_id; ]]]"
              styles:
                card:
                  - background-color: "[[[ return variables.colors.button; ]]]"
                img_cell:
                  - background-color: >
                      [[[
                        if (entity.state == "on") {
                          return 'rgba(' + variables.colors.button + ',0.2)';
                        }

                        return 'rgba(' + variables.colors.button + ',0.6)';
                      ]]]
                icon:
                  - color: >
                      [[[
                        if (entity.state == "off") {
                          return 'rgba(' + variables.colors.inactive + ',0.9)';
                        }

                        return 'rgba(' + variables.colors.active + ',1)';
                      ]]]
              tap_action:
                action:  "call-service"
                service: "light.turn_on"
                service_data:
                  entity_id:      "[[[ return entity.entity_id; ]]]"
                  brightness_pct: "[[[ return variables.options.brightness_1; ]]]"
              icon: "[[[ return variables.icons.brightness_1; ]]]"
          btn2: # Brightness preset #2
            card:
              type: custom:button-card
              template: widget_icon
              entity: "[[[ return entity.entity_id; ]]]"
              styles:
                card:
                  - background-color: "[[[ return variables.colors.button; ]]]"
                img_cell:
                  - background-color: >
                      [[[
                        if (entity.state == "on") {
                          return 'rgba(' + variables.colors.button + ',0.2)';
                        }

                        return 'rgba(' + variables.colors.button + ',0.6)';
                      ]]]
                icon:
                  - color: >
                      [[[
                        if (entity.state == "off") {
                          return 'rgba(' + variables.colors.inactive + ',0.9)';
                        }

                        return 'rgba(' + variables.colors.active + ',1)';
                      ]]]
              tap_action:
                action:  "call-service"
                service: "light.turn_on"
                service_data:
                  entity_id:      "[[[ return entity.entity_id; ]]]"
                  brightness_pct: "[[[ return variables.options.brightness_2; ]]]"
              icon: "[[[ return variables.icons.brightness_2; ]]]"
          btn3: # Brightness preset #3
            card:
              type: custom:button-card
              template: widget_icon
              entity: "[[[ return entity.entity_id; ]]]"
              styles:
                card:
                  - background-color: "[[[ return variables.colors.button; ]]]"
                img_cell:
                  - background-color: >
                      [[[
                        if (entity.state == "on") {
                          return 'rgba(' + variables.colors.button + ',0.2)';
                        }

                        return 'rgba(' + variables.colors.button + ',0.6)';
                      ]]]
                icon:
                  - color: >
                      [[[
                        if (entity.state == "off") {
                          return 'rgba(' + variables.colors.inactive + ',0.9)';
                        }

                        return 'rgba(' + variables.colors.active + ',1)';
                      ]]]
              tap_action:
                action:  "call-service"
                service: "light.turn_on"
                service_data:
                  entity_id:      "[[[ return entity.entity_id; ]]]"
                  brightness_pct: "[[[ return variables.options.brightness_3; ]]]"
              icon: "[[[ return variables.icons.brightness_3; ]]]"
          btn4: # Brightness preset #4
            card:
              type: custom:button-card
              template: widget_icon
              entity: "[[[ return entity.entity_id; ]]]"
              styles:
                card:
                  - background-color: "[[[ return variables.colors.button; ]]]"
                img_cell:
                  - background-color: >
                      [[[
                        if (entity.state == "on") {
                          return 'rgba(' + variables.colors.button + ',0.2)';
                        }

                        return 'rgba(' + variables.colors.button + ',0.6)';
                      ]]]
                icon:
                  - color: >
                      [[[
                        if (entity.state == "off") {
                          return 'rgba(' + variables.colors.inactive + ',0.9)';
                        }

                        return 'rgba(' + variables.colors.active + ',1)';
                      ]]]
              tap_action:
                action:  "call-service"
                service: "light.turn_on"
                service_data:
                  entity_id:      "[[[ return entity.entity_id; ]]]"
                  brightness_pct: "[[[ return variables.options.brightness_4; ]]]"
              icon: "[[[ return variables.icons.brightness_4; ]]]"
          btn5: # Brightness preset #5
            card:
              type: custom:button-card
              template: widget_icon
              entity: "[[[ return entity.entity_id; ]]]"
              styles:
                card:
                  - background-color: "[[[ return variables.colors.button; ]]]"
                img_cell:
                  - background-color: >
                      [[[
                        if (entity.state == "on") {
                          return 'rgba(' + variables.colors.button + ',0.2)';
                        }

                        return 'rgba(' + variables.colors.button + ',0.6)';
                      ]]]
                icon:
                  - color: >
                      [[[
                        if (entity.state == "off") {
                          return 'rgba(' + variables.colors.inactive + ',0.9)';
                        }

                        return 'rgba(' + variables.colors.active + ',1)';
                      ]]]
              tap_action:
                action:  "call-service"
                service: "light.turn_on"
                service_data:
                  entity_id:      "[[[ return entity ? entity.entity_id : null; ]]]"
                  brightness_pct: "[[[ return variables.options.brightness_5; ]]]"
              icon: "[[[ return variables.icons.brightness_5; ]]]"

card_asmodai_tablet_light_scenes:
  variables:
    scene_include: "[[[ return variables.scene_include ]]]"
    scene_exclude: "[[[ return variables.scene_exclude ]]]"
    light_entity:  "[[[ return variables.light_entity ]]]"
  show_icon: false
  show_name: false
  show_label: false
  styles:
    grid:
      - grid-template-areas: "'item1'"
      - grid-template-columns: "100%"
      - grid-template-rows: "100%"
      - row-gap: "5px"
      - justify-items: "center"
      - column-gap: "auto"
    card:
      - border-radius: "none"
      - box-shadow: "none"
      - padding: 0px
    custom_fields:
      item1:
        - border-radius: "none"
        - box-shadow: "none"
        - padding: 0px
  custom_fields:
    item1:
      card:
        type: custom:auto-entities
        styles:
          card:
            - border-radius: "none"
            - box-shadow: "none"
        card:
          type: entities
          styles:
            card:
              - border-radius: "none"
              - box-shadow: "none"
        filter:
          include:
            - entity_id: "[[[ return variables.scene_include ]]]"
              options:
                show_name: true
                show_icon: true
                show_state: false
                show_header_toggle: false
                styles:
                  card:
                    - border-radius: "none"
                    - box-shadow: "none"
                tap_action:
                  action: call-service
                  service: scene.turn_on
                  service_data:
                    entity_id: this.entity_id
          exclude:
            - entity_id: "[[[ return variables.scene_exclude ]]]"
